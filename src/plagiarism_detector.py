# -*- coding: utf-8 -*-
"""Plagiarism_detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rp18I9KXeZO6f3h0gOuZFwMPcxDPN6ax
"""

!pip install torch transformers scikit-learn

import pandas as pd
from sentence_transformers import SentenceTransformer, InputExample, losses, util
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

data = pd.read_csv("train_snli.txt", sep="\t", header=None, names=["sentence1", "sentence2", "label"])
data

print(data.isnull().sum())
data.dropna(inplace=True)

# 2. Train-test split
train_df, test_df = train_test_split(data, test_size=0.2, random_state=42)

# 3. Convert train data to InputExamples
train_examples = [
    InputExample(texts=[row['sentence1'], row['sentence2']], label=float(row['label']))
    for _, row in train_df.iterrows()
]

# 4. Load SentenceTransformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

# 5. DataLoader and Loss
train_dataloader = DataLoader(train_examples, shuffle=True, batch_size=16)
train_loss = losses.CosineSimilarityLoss(model=model)

# 6. Save the model
model.save("output/plagiarism-checker-model")

# 7. Compute cosine similarity for test samples
y_true = []
y_pred = []
threshold = 0.5
i=0
for _, row in test_df.iterrows():
    i+=1
    if(i>400):
      break
    sent1 = row['sentence1']
    sent2 = row['sentence2']
    true_label = int(row['label'])

    embedding1 = model.encode(sent1)
    embedding2 = model.encode(sent2)

    score = util.cos_sim(embedding1, embedding2)[0][0].item()
    pred_label = 1 if score >= threshold else 0

    y_true.append(true_label)
    y_pred.append(pred_label)

print("\n📊 Evaluation Results on Test Set:")
print(f"Accuracy  : {accuracy_score(y_true, y_pred):.2f}")
print(f"Precision : {precision_score(y_true, y_pred):.2f}")
print(f"Recall    : {recall_score(y_true, y_pred):.2f}")
print(f"F1 Score  : {f1_score(y_true, y_pred):.2f}")

# 9. Custom input for prediction
print("\n📝 Test the model with your own input sentences.")
while True:
    input1 = input("\nEnter the first sentence (or type 'exit' to quit): ")
    if input1.lower() == 'exit':
        break
    input2 = input("Enter the second sentence: ")

    embedding1 = model.encode(input1)
    embedding2 = model.encode(input2)
    score = util.cos_sim(embedding1, embedding2)[0][0].item()
    pred_label = 1 if score >= threshold else 0

    print(f"\n🔍 Cosine Similarity Score: {score:.4f} & Prediction = {pred_label}")

!zip -r /content/plagiarism-checker-model.zip /content/output/plagiarism-checker-model

from google.colab import files
files.download('/content/plagiarism-checker-model.zip')